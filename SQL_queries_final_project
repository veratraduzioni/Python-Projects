-- CODE OF THE TABLES CREATION

CREATE TABLE if not exists Users(
  ID_U INT NOT NULL AUTO_INCREMENT,
  user_uuid int not null,
  subscription_date DATE,
  language varchar(40),
  country varchar(40),
  platform varchar(40),
  cooking_date DATE,
  chef_id int not null,
  challenge_id int not null,
  primary key (ID_U)
);


CREATE TABLE if not exists Recipes(
  ID_R INT NOT NULL AUTO_INCREMENT,
  recipe_id int not null,
  level varchar(40),
  category varchar(40),
  stars int not null,
  chef_id int not null,
  challenge_id int not null,
  primary key (ID_R)
);

-- CODE TO IMPORT THE DATA OF THE DATASET

LOAD DATA INFILE 'C:\food_data_clean.csv'
INTO TABLE users
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
IGNORE 1 LINES
(@col1, @col2, @dummy1, @col3, @col4, @dummy2, @col5, @col6, @col7, @col8)
SET cooking_date = @col1, user_uuid = @col2, chef_id = @col3,
language = @col4, challenge_id = @col5, country = @col6, subscription_date = @col7, platform = @col8;

LOAD DATA INFILE 'C:\food_data_clean.csv'
INTO TABLE recipes
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
IGNORE 1 LINES
(@dummy1, @dummy2, @col1, @col2, @dummy3, @col3, @col4, @dummy4, @dummy5, @dummy6, @col5, @col6)
SET category = @col1, chef_id = @col2, level = @col3,
challenge_id = @col4, recipe_id = @col5, stars = @col6;

-- CODE OF ALL THE QUERIES

-- Min e max subscription year in the dataset

SELECT
MIN(subscription_date) AS first_year,
MAX(subscription_date) AS last_year
FROM users;

-- Therefore the years in the dataset are 2020, 2021, and 2022. Let's calculate the amount of users who enrolled each year.

SELECT country, COUNT(DISTINCT user_uuid) AS TotalUsers
FROM users
WHERE EXTRACT(YEAR from subscription_date) = 2020
GROUP BY country;

SELECT country, COUNT(DISTINCT user_uuid) AS TotalUsers
FROM users
WHERE EXTRACT(YEAR from subscription_date) = 2021
GROUP BY country;

SELECT country, COUNT(DISTINCT user_uuid) AS TotalUsers
FROM users
WHERE EXTRACT(YEAR from subscription_date) = 2022
GROUP BY country;

-- There has been a drop of new subscriptions in 2022. Let's move on the recipes, checking how much they grew during the years.

SELECT
MIN(cooking_date) AS first_year,
MAX(cooking_date) AS last_year
FROM users;

SELECT
    EXTRACT(YEAR FROM u.cooking_date) AS year,
    COUNT(DISTINCT r.recipe_id) AS TotalRecipes,
    COUNT(DISTINCT u.challenge_id) as total_challenges,
    count(distinct u.user_uuid) as total_users
FROM
    users u
INNER JOIN
    recipes r ON u.challenge_id = r.challenge_id
GROUP BY
    EXTRACT(YEAR FROM u.cooking_date)
ORDER BY
    year DESC;

-- Let's now calculate how many recipes received 4 and 5 stars.

SELECT COUNT(DISTINCT recipe_id) AS TotalRecipes
FROM recipes
WHERE stars >=4;

-- Let's analyze more in detail which recipes are per level and category. 

SELECT category, level, COUNT(DISTINCT recipe_id) AS TopRecipes
FROM recipes
WHERE stars >= 4 AND level = 'basic'
GROUP BY category, level;

SELECT category, level, COUNT(DISTINCT recipe_id) AS TopRecipes
FROM recipes
WHERE stars >= 4 AND level = 'intermediate'
GROUP BY category, level;

SELECT category, level, COUNT(DISTINCT recipe_id) AS TopRecipes
FROM recipes
WHERE stars >= 4 AND level = 'advanced'
GROUP BY category, level;

-- Quick check of the total recipes published per category.

SELECT category, COUNT(DISTINCT recipe_id) AS TotalRecipes
FROM recipes
GROUP BY category;

-- The top categories are then ethnic, breakfast, lunch. To find out who are the most popular chefs, I group only the most successful categories by chef.

SELECT category, chef_id, COUNT(DISTINCT recipe_id) AS TopRecipes
FROM recipes
WHERE stars >= 4 AND category IN ('ethnic', 'breakfast', 'lunch')
GROUP BY category, chef_id
ORDER BY TopRecipes DESC
LIMIT 10;

-- Now it's time to analyze the users. Let's sort them by country of origin per each category and level of recipes.

SELECT country, category, level, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'Italy'
GROUP BY category;

SELECT country, category, level, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'France'
GROUP BY category;

SELECT country, category, level, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'UnitedKingdom'
GROUP BY category;

-- I repeat the same analysis to find out if the nationality matches the language.

SELECT country, category, level, language, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'UnitedKingdom' AND language = 'en' 
GROUP BY category;

SELECT country, category, level, language, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'Italy' AND language = 'it' 
GROUP BY category;

SELECT country, category, level, language, COUNT(DISTINCT user_uuid) AS UserOrigin
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
WHERE stars >= 4 AND country = 'France' AND language = 'fr' 
GROUP BY category;

-- Let's move on in analyzing the users regardless of the successful recipes.

SELECT country, category, level, COUNT(DISTINCT user_uuid) AS UserOriginTotal
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
GROUP BY category, level;

-- Let's analyze also the preferences of the users during the years of subscription.

SELECT cooking_date, country, category, level, COUNT(DISTINCT user_uuid) AS UserPreferenceTime
FROM recipes
INNER JOIN users ON recipes.chef_id = users.chef_id
GROUP BY category, level;

-- Eventually, let's analyze the challenges per country of origin and platform used.

SELECT u.challenge_id, u.platform, u.country, COUNT(DISTINCT u.user_uuid) AS UserChallenge
FROM recipes r
INNER JOIN users u ON r.challenge_id = u.challenge_id
GROUP BY country, platform, challenge_id;
